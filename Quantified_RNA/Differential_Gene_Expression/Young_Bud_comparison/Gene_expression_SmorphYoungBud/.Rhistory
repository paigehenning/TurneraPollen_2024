useInternalMatrixAlgebra = TRUE
load("C:/Users/Paige/Desktop/New folder/adj.RData")
TOM=TOMsimilarityFromExpr(EXP,networkType = "unsigned", TOMType = "unsigned", power = softPower,nThreads = 10)
library(WGCNA)
library(flashClust)
enableWGCNAThreads()
options(stringsAsFactors = FALSE)
TOM=TOMsimilarityFromExpr(EXP,networkType = "unsigned", TOMType = "unsigned", power = softPower,nThreads = 20)
softPower = 7
TOM=TOMsimilarityFromExpr(EXP,networkType = "unsigned", TOMType = "unsigned", power = softPower,nThreads = 20)
require(parallel)
require(doParallel)
cpucores <- makeCluster(detectCores(), type='PSOCK') ;
registerDoParallel(cpucores) ;
Sys.setenv("MC_CORES"=cpucores) ;
cpucores <- 16
install.packages("parallel")
load("C:/Users/Paige/Desktop/New folder/adj.RData")
install.packages(c("dynamicTreeCut", "cluster", "flashClust", "Hmisc", "reshape", "foreach", "doParallel") )
source("http://bioconductor.org/biocLite.R")
install.packages("Bioconductor")
biocLite("impute")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("impute")
BiocManager::install("impute",force=TRUE)
biocLite("impute")
BiocManager::install("limma")
BiocManager::install("limma",force=TRUE)
moduletraitassociation <- read.delim("G:/co-expression/moduletraitassociation.txt")
View(moduletraitassociation)
heatmap(moduletraitassociation)
moduletraitassociation <- read.delim("G:/co-expression/moduletraitassociation.txt", row.names=1)
View(moduletraitassociation)
heatmap(moduletraitassociation)
heatmap(moduletraitassociation,scale = "column")
eatmap(as.matrix(moduletraitassociation))
heatmap(as.matrix(moduletraitassociation))
heatmap(as.matrix(moduletraitassociation),cexRow = 1)
heatmap(as.matrix(moduletraitassociation),cexRow = 2)
heatmap(as.matrix(moduletraitassociation),cexRow = 1)
heatmap(as.matrix(moduletraitassociation),cexRow = 1,cexCol = 1)
heatmap(as.matrix(moduletraitassociation),cexRow = 1,cexCol = 1)
library(ggplot2)
ggplot(moduletraitassociation
)
library(ggplot2)
library(plotly)
install.packages("plotly")
library(plotly)
plot_ly(z=moduletraitassociation,type="heatmap")
heatmap(as.matrix(moduletraitassociation),cexRow = 1,cexCol = 1)
heatmap(as.matrix(moduletraitassociation),cexRow =0.5 ,cexCol = 1)
heatmap(as.matrix(moduletraitassociation),cexRow =0.5 ,cexCol = 0.5)
heatmap(as.matrix(moduletraitassociation),cexRow =0.75 ,cexCol = 0.75)
setwd("E:/Turnera_pollen_GITHUB/Turnera_desiccated_pollen_mutant/YvSCSmorphOnlyAnalysis/Gene_expression_SmorphOnly")
setwd("C:/Users/Paige/Desktop/YvSCSmorphOnlyAnalysis/Gene_expression_SmorphOnly")
library(ballgown)
pheno=read.csv("Key.txt",header=TRUE,sep='\t')
bg=ballgown(dataDir = "ballgown",samplePattern = "Sample",pData = pheno)
save(bg, file='bg.rda')
transcript_fpkm = texpr(bg)
gene_expression = gexpr(bg)
plotMeans('gene-Tsubulata_060005', bg,groupvar='SI',meas='FPKM',colorby='transcript')
plotMeans('gene-Tsubulata_060006', bg,groupvar='SI', meas='FPKM', colorby='transcript')
plotMeans('gene-Tsubulata_060004', bg,groupvar='SI', meas='FPKM', colorby='transcript')
stat_results = stattest(bg, feature='gene', meas='FPKM', covariate='SI')
write.table(stat_results,file="SCvSI.txt",sep = "\t")
